import "pkg:/source/Misc.bs"
import "pkg:/source/api/OwncastSDK.bs"
import "pkg:/source/enums/Constant.bs"
import "pkg:/source/enums/KeyCode.bs"
import "pkg:/source/enums/TaskControl.bs"

sub init()
    m.AppLaunchBeaconSent = false
    m.rowList = m.top.findNode("rowList")
    m.rowlist.observeFieldScoped("rowItemFocused", "onRowItemFocusedChanged")
    m.rowlist.observeFieldScoped("rowItemSelected", "onRowItemSelectedChanged")

    m.getStreamDataTask = createObject("roSGNode", "GetStreamData")
    m.getStreamsTask = createObject("roSGNode", "GetStreams")
    m.refreshSceneContent = true
    m.userFavorites = {}
    m.userConnectedServers = {}
end sub

sub onShow()
    m.getStreamsTask.observeFieldScoped("responseBody", "onGetStreamsLoaded")
    m.getStreamsTask.control = TaskControl.RUN
end sub

sub onGetStreamsLoaded()
    m.getStreamsTask.unobserveFieldScoped("responseBody")
    if not isValid(m.getStreamsTask.responseBody) then return

    m.streams = m.getStreamsTask.responseBody
    sortData()
end sub

sub sortData()
    if not isChainValid(m.streams, "sections") then return
    userFavorites = Registry.Get("Favorites")
    userConnectedServers = Registry.Get("ConnectedServers")

    if not isStringEqual(m.userFavorites, formatJSON(userFavorites))
        m.userFavorites = formatJSON(userFavorites)
        m.refreshSceneContent = true
    end if

    if not isStringEqual(m.userConnectedServers, formatJSON(userConnectedServers))
        m.userConnectedServers = formatJSON(userConnectedServers)
        m.refreshSceneContent = true
    end if

    deeplinkID = m.top.args.LookupCI("contentID") ?? Constant.UNUSEDCONTENTID

    ' Channel sorting logic based on original code by @roadriverrail
    channelsByTag = {
        "favorite": { title: "Favorites", channels: createObject("RoSGNode", "ContentNode") },
        "now-live": { title: "Now Live", channels: createObject("RoSGNode", "ContentNode") },
        "connected": { title: "Manually Added Owncast Live Streams", channels: createObject("RoSGNode", "ContentNode") },
        "music": { title: "Music", channels: createObject("RoSGNode", "ContentNode") },
        "tech": { title: "Tech", channels: createObject("RoSGNode", "ContentNode") },
        "chatting": { title: "Chatting", channels: createObject("RoSGNode", "ContentNode") },
        "video-games": { title: "Video Games", channels: createObject("RoSGNode", "ContentNode") },
        "now-offline": { title: "Offline", channels: createObject("RoSGNode", "ContentNode") }
    }

    rowListContent = createObject("RoSGNode", "ContentNode")

    thisItem = createObject("RoSGNode", "ChannelData")
    thisItem.id = "connectToServer"
    thisItem.title = "Add Owncast Live Stream"
    thisItem.SecondaryTitle = ""
    thisItem.logoImageURI = "pkg:/images/icons/computerConnect.png"
    channelsByTag["connected"].channels.AppendChild(thisItem)

    streamList = []

    if isChainValid(userConnectedServers, "serverlist")
        for each feed in userConnectedServers.LookupCI("serverlist")
            thisItem = createObject("RoSGNode", "ChannelData")
            thisItem.isConnectedServer = true
            thisItem.id = feed.LookupCI("url")
            thisItem.url = `${feed.LookupCI("url")}/hls/stream.m3u8`
            thisItem.thumbnailImageURI = api.server.getThumbnailURL(feed.LookupCI("url"))
            thisItem.live = false

            streamList.push({
                node: thisItem,
                url: feed.LookupCI("url")
            })

            channelsByTag["connected"].channels.AppendChild(thisItem)
        end for
    end if

    m.getStreamDataTask.streamList = streamList
    m.getStreamDataTask.control = TaskControl.RUN

    for each streamSection in m.streams.sections
        if not isChainValid(streamSection, "instances") then continue for

        for each feed in streamSection.instances
            thisItemTags = feed.LookupCI("tags")

            itemTitle = feed.LookupCI("name")
            itemID = feed.LookupCI("id").toStr()
            isFavorite = userFavorites.LookupCI(itemID) ?? false
            itemSecondaryTitle = getStreamTitle(feed)
            isLive = streamSection.LookupCI("online") ?? false
            logoImageURI = `${feed.LookupCI("url")}${feed.LookupCI("logo")}`
            thumbnailImageURI = api.image.getThumbnailURL(itemID)

            thisItemTags.push({
                slug: isLive ? "now-live" : "now-offline"
            })

            if isFavorite
                thisItemTags.push({
                    slug: "favorite"
                })
            end if

            for each tag in thisItemTags
                if channelsByTag.DoesExist(tag.slug)
                    thisItem = createObject("RoSGNode", "ChannelData")
                    thisItem.id = itemID
                    thisItem.live = isLive
                    thisItem.tags = thisItemTags
                    thisItem.title = itemTitle
                    thisItem.SecondaryTitle = itemSecondaryTitle
                    thisItem.thumbnailImageURI = thumbnailImageURI
                    thisItem.logoImageURI = logoImageURI
                    thisItem.length = 0
                    thisItem.isFavorite = isFavorite
                    thisItem.url = `${feed.LookupCI("url")}/hls/stream.m3u8`
                    channelsByTag[tag.slug].channels.AppendChild(thisItem)

                    if isStringEqual(itemID, deeplinkID)
                        m.top.deeplinkContent = thisItem
                        deeplinkID = Constant.UNUSEDCONTENTID
                    end if
                end if
            end for
        end for
    end for

    for each tag in ["favorite", "now-live", "connected", "music", "tech", "chatting", "video-games", "now-offline"]
        if channelsByTag[tag].channels.getChildCount() = 0 then continue for

        channelsByTag[tag].channels.title = channelsByTag[tag].title
        rowListContent.AppendChild(channelsByTag[tag].channels)
    end for

    if m.refreshSceneContent
        m.rowList.content = rowListContent
        m.rowList.setFocus(true)

        m.refreshSceneContent = false
    end if

    if not m.AppLaunchBeaconSent
        m.top.signalBeacon("AppLaunchComplete")
        m.AppLaunchBeaconSent = true
    end if
end sub

function getStreamTitle(feed as object) as string

    feedStreamTitle = feed.LookupCI("streamTitle")
    if isvalid(feedStreamTitle)
        if len(feedStreamTitle) > 0
            return feedStreamTitle
        end if
    end if

    feedStreamDescription = feed.LookupCI("description")
    if isvalid(feedStreamDescription)
        if len(feedStreamDescription) > 0
            return feedStreamDescription
        end if
    end if

    return ""
end function

sub onRowItemFocusedChanged()
    if isValid(m.itemInFocus)
        m.itemInFocus.focus = false
    end if

    m.itemInFocus = m.rowList.content.getChild(m.rowList.rowItemFocused[0]).getChild(m.rowList.rowItemFocused[1])
    if isValid(m.itemInFocus)
        m.itemInFocus.focus = true
    end if
end sub

sub onRowItemSelectedChanged()
    m.top.selectedStream = m.rowList.content.getChild(m.rowList.rowItemSelected[0]).getChild(m.rowList.rowItemSelected[1])

    ' Prevent double firing
    m.top.selectedStream = invalid
end sub

function onKeyEvent(key as string, press as boolean) as boolean
    return false
end function
